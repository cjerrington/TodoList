{
  "version": 3,
  "file": "BintrayPublisher.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/BintrayPublisher.ts"
  ],
  "names": [],
  "mappings": ";;AACA,2BAA2C,AAAU,AACrD,AAAC;AAAD,gCAAoE,AAAiB,AACrF,AAAC;AAAD,sBAAoB,AAAa,AACjC,AAAC;AAAD,uBAAsB,AAAc,AACpC,AAAC;AAAD,uBAAyB,AAAM,AAC/B,AAAC;AAAD,6BAAqB,AAAY,AAGjC,AAAC;AADD,AAAmC;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAiB,AAAC;AAQ5C;AAME,gBAAoB,AAAY,MAAE,AAAc,QAAU,AAAe,SAAU,AAAmB;YAAU,AAAI,6DAAW,AAAS;YAAU,AAAO,gEAAmB,AAAE;;AAA1J,aAAI,OAAJ,AAAI,AAAQ;AAA0B,aAAO,UAAP,AAAO,AAAQ;AAAU,aAAW,cAAX,AAAW,AAAQ;AAAU,aAAI,OAAJ,AAAI,AAAoB;AAAU,aAAO,UAAP,AAAO,AAAqB;AAC5K,AAAI,aAAC,AAAI,AAAG,iBAAS,IAAI,AAAM,AAAC,WAAG,AAAI,UAAI,AAAM,MAAE,AAAC,KAAC,AAAQ,SAAC,AAAQ,AAAC,SAAE;AACzE,AAAI,aAAC,AAAQ,AAAG,yBAAa,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAW,WAAE;AACzE,AAAI,aAAC,AAAe,kBAA6B,AAAI,KAAC,AAAI,AAAE,AAC9D;AAAC;AAEa,AAAI;;AAChB,gBAAI,AAAC;AACH,AAAM,uBAAC,MAAM,gBAAc,AAAU,mBAAG,AAAI,KAAC,AAAQ,uBAAa,AAAI,KAAC,AAAO,OAAE,KAAE,AAAI,KAAC,AAAI,AAAC,AAC9F;AACA,cAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,aAAY,gBAAS,aAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC5D,AAAE,AAAC,wBAAC,AAAI,KAAC,AAAO,QAAC,AAAO,YAAK,AAAc,AAAC,gBAAC,AAAC;AAC5C,8BAAG,AAAC,gBAAW,AAAI,KAAC,AAAO,OAA8B,AAAC;AAC1D,AAAM,+BAAC,AAAI,KAAC,AAAa,AAAE,AAC7B;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,8BAAG,AAAC,gBAAW,AAAI,KAAC,AAAO,OAAiD,AAAC,AAC/E;AAAC,AACH;AAAC;AAED,sBAAM,AAAC,AACT;AAAC,AACH;AAAC;AAAA;AAEO,AAAa;AACnB,AAAM,+BAAe,AAAU,mBAAG,AAAI,KAAC,AAAQ,QAAW,cAAE,AAAI,KAAC,AAAI;AACnE,AAAI,kBAAE,AAAI,KAAC,AAAO,AACnB,AAAC,AACJ;AAHyE,SAAhE;AAGR;AAEK,AAAM,WAAC,AAAY,MAAE,AAAqB;;AAC9C,kBAAM,AAAQ,WAAG,AAAY,gBAAI,OAAQ,SAAC,AAAI,AAAC;AAC/C,kBAAM,AAAO,UAAG,MAAM,AAAI,KAAC,AAAe;AAC1C,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,uBAAK,AAAC,kBAAW,AAAI,KAAC,AAAO,wDAA+C,AAAQ,QAAmB,AAAC;AACxG,AAAM,AACR;AAAC;AAED,kBAAM,AAAQ,WAAG,MAAM,aAAI,KAAC,AAAI,AAAC;AACjC,gBAAI,AAAe,kBAAG,AAAC;AACvB,AAAG,AAAC,iBAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AAC3B,oBAAI,AAAC;AACH,AAAM,2BAAC,sBAAkB;AACvB,AAAQ,kCAAE,AAAiB;AAC3B,AAAI,AAAE,2CAAY,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAW,iBAAI,AAAO,QAAC,AAAI,UAAI,AAAQ,QAAE;AAC1F,AAAM,gCAAE,AAAK;AACb,AAAO;AACL,AAAY,0CAAE,AAAkB;AAChC,AAAgB,8CAAE,AAAQ,SAAC,AAAI;AAC/B,AAAoB,kDAAE,AAAG;AACzB,AAAmB,iDAAE,AAAG,AACzB,AACF;AANU;AAJoB,qBAAlB,EAUV,AAAI,KAAC,AAAI,MAAE,gBAAU,WAAC,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAQ,UAAE,AAAQ,AAAC,AAAC,AAChE;AACA,kBAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,wBAAC,AAAC,aAAY,gBAAS,aAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,OAAI,AAAe,AAAE,oBAAG,AAAC,AAAC,GAAC,AAAC;AACnF,AAAQ,AACZ;AAAC;AAED,0BAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC;AAAA;AAED,AAAoC;AACpC,AAAa;AACX,AAAE,AAAC,YAAC,CAAC,AAAI,KAAC,AAAe,gBAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AACxC,AAAM,mBAAC,WAAe,QAAC,AAAO,AAAE,AAClC;AAAC;AAED,cAAM,AAAO,UAAG,AAAI,KAAC,AAAe,gBAAC,AAAK,AAAE;AAC5C,AAAE,AAAC,YAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAM,mBAAC,WAAe,QAAC,AAAO,AAAE,AAClC;AAAC;AAED,AAAM,eAAC,gBAAc,AAAU,6BAAa,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAW,0BAAa,AAAO,QAAC,AAAI,IAAE,KAAE,AAAI,KAAC,AAAI,MAAE,AAAI,MAAE,AAAQ,AAAC,AAC/I;AAAC,AACH,AAAC;;AApFY,QAAgB,mBAoF5B",
  "sourcesContent": [
    "import { Publisher, PublishOptions } from \"./publisher\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { bintrayRequest, HttpError, doApiRequest, uploadFile } from \"./gitHubRequest\"\nimport { log } from \"../util/log\"\nimport { debug } from \"../util/util\"\nimport { basename } from \"path\"\nimport { stat } from \"fs-extra-p\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\n//noinspection ReservedWordAsName\ninterface Version {\n  readonly name: string\n  readonly package: string\n}\n\nexport class BintrayPublisher implements Publisher {\n  private _versionPromise: BluebirdPromise<Version>\n  private readonly auth: string\n\n  private basePath: string\n\n  constructor(private user: string, apiKey: string, private version: string, private packageName: string, private repo: string = \"generic\", private options: PublishOptions = {}) {\n    this.auth = `Basic ${new Buffer(`${user}:${apiKey}`).toString(\"base64\")}`\n    this.basePath = `/packages/${this.user}/${this.repo}/${this.packageName}`\n    this._versionPromise = <BluebirdPromise<Version>>this.init()\n  }\n\n  private async init(): Promise<Version | null> {\n    try {\n      return await bintrayRequest<Version>(`${this.basePath}/versions/${this.version}`, this.auth)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        if (this.options.publish !== \"onTagOrDraft\") {\n          log(`Version ${this.version} doesn't exist, creating one`)\n          return this.createVersion()\n        }\n        else {\n          log(`Version ${this.version} doesn't exist, artifacts will be not published`)\n        }\n      }\n\n      throw e\n    }\n  }\n\n  private createVersion() {\n    return bintrayRequest<Version>(`${this.basePath}/versions`, this.auth, {\n      name: this.version,\n    })\n  }\n\n  async upload(file: string, artifactName?: string): Promise<any> {\n    const fileName = artifactName || basename(file)\n    const version = await this._versionPromise\n    if (version == null) {\n      debug(`Version ${this.version} doesn't exist and is not created, artifact ${fileName} is not published`)\n      return\n    }\n\n    const fileStat = await stat(file)\n    let badGatewayCount = 0\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await doApiRequest<any>({\n          hostname: \"api.bintray.com\",\n          path: `/content/${this.user}/${this.repo}/${this.packageName}/${version.name}/${fileName}`,\n          method: \"PUT\",\n          headers: {\n            \"User-Agent\": \"electron-builder\",\n            \"Content-Length\": fileStat.size,\n            \"X-Bintray-Override\": \"1\",\n            \"X-Bintray-Publish\": \"1\",\n          }\n        }, this.auth, uploadFile.bind(this, file, fileStat, fileName))\n      }\n      catch (e) {\n        if (e instanceof HttpError && e.response.statusCode === 502 && badGatewayCount++ < 3) {\n            continue\n        }\n\n        throw e\n      }\n    }\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  deleteRelease(): Promise<any> {\n    if (!this._versionPromise.isFulfilled()) {\n      return BluebirdPromise.resolve()\n    }\n\n    const version = this._versionPromise.value()\n    if (version == null) {\n      return BluebirdPromise.resolve()\n    }\n\n    return bintrayRequest<Version>(`/packages/${this.user}/${this.repo}/${this.packageName}/versions/${version.name}`, this.auth, null, \"DELETE\")\n  }\n}"
  ]
}
