"use strict";

const metadata_1 = require("./metadata");
const bluebird_1 = require("bluebird");
const path = require("path");
const fs_extra_p_1 = require("fs-extra-p");
const util_1 = require("./util/util");
const archive_1 = require("./targets/archive");
const minimatch_1 = require("minimatch");
const asarUtil_1 = require("./asarUtil");
const deepAssign_1 = require("./util/deepAssign");
const log_1 = require("./util/log");
const filter_1 = require("./util/filter");
const dirPackager_1 = require("./packager/dirPackager");
//noinspection JSUnusedLocalSymbols
const __awaiter = require("./util/awaiter");
class Target {
    constructor(name) {
        this.name = name;
    }
    finishBuild() {
        return bluebird_1.Promise.resolve();
    }
}
exports.Target = Target;
class TargetEx extends Target {}
exports.TargetEx = TargetEx;
class PlatformPackager {
    constructor(info) {
        this.info = info;
        this.devMetadata = info.devMetadata;
        this.platformSpecificBuildOptions = this.normalizePlatformSpecificBuildOptions(info.devMetadata.build[this.platform.buildConfigurationKey]);
        this.appInfo = this.prepareAppInfo(info.appInfo);
        this.options = info.options;
        this.projectDir = info.projectDir;
        this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname);
        this.resourceList = fs_extra_p_1.readdir(this.buildResourcesDir).catch(e => {
            if (e.code !== "ENOENT") {
                throw e;
            }
            return [];
        });
    }
    get platform() {}
    prepareAppInfo(appInfo) {
        return appInfo;
    }
    normalizePlatformSpecificBuildOptions(options) {
        return options == null ? Object.create(null) : options;
    }
    createTargets(targets, mapper, cleanupTasks) {
        throw new Error("not implemented");
    }
    getCscPassword() {
        const password = this.options.cscKeyPassword || process.env.CSC_KEY_PASSWORD;
        if (util_1.isEmptyOrSpaces(password)) {
            log_1.log("CSC_KEY_PASSWORD is not defined, empty password will be used");
            return "";
        } else {
            return password.trim();
        }
    }
    get relativeBuildResourcesDirname() {
        return util_1.use(this.devMetadata.directories, it => it.buildResources) || "build";
    }
    computeAppOutDir(outDir, arch) {
        return path.join(outDir, `${ this.platform.buildConfigurationKey }${ arch === metadata_1.Arch.x64 ? "" : `-${ metadata_1.Arch[arch] }` }`);
    }
    dispatchArtifactCreated(file, artifactName) {
        this.info.eventEmitter.emit("artifactCreated", {
            file: file,
            artifactName: artifactName,
            platform: this.platform
        });
    }
    getExtraFilePatterns(isResources, arch, customBuildOptions) {
        const patterns = this.getFilePatterns(isResources ? "extraResources" : "extraFiles", customBuildOptions);
        return patterns == null || patterns.length === 0 ? null : this.getParsedPatterns(patterns, arch);
    }
    doPack(options, outDir, appOutDir, platformName, arch, platformSpecificBuildOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const asarOptions = this.computeAsarOptions(platformSpecificBuildOptions);
            const extraResourcePatterns = this.getExtraFilePatterns(true, arch, platformSpecificBuildOptions);
            const extraFilePatterns = this.getExtraFilePatterns(false, arch, platformSpecificBuildOptions);
            const p = dirPackager_1.pack(options, appOutDir, platformName, metadata_1.Arch[arch], this.info.electronVersion, () => __awaiter(this, void 0, void 0, function* () {
                const ignoreFiles = new Set([path.relative(this.info.appDir, outDir), path.relative(this.info.appDir, this.buildResourcesDir)]);
                if (!this.info.isTwoPackageJsonProjectLayoutUsed) {
                    const result = yield bluebird_1.Promise.all([filter_1.listDependencies(this.info.appDir, false), filter_1.listDependencies(this.info.appDir, true)]);
                    const productionDepsSet = new Set(result[1]);
                    // npm returns real path, so, we should use relative path to avoid any mismatch
                    const realAppDirPath = yield fs_extra_p_1.realpath(this.info.appDir);
                    for (let it of result[0]) {
                        if (!productionDepsSet.has(it)) {
                            if (it.startsWith(realAppDirPath)) {
                                it = it.substring(realAppDirPath.length + 1);
                            } else if (it.startsWith(this.info.appDir)) {
                                it = it.substring(this.info.appDir.length + 1);
                            }
                            ignoreFiles.add(it);
                        }
                    }
                }
                let patterns = this.getFilePatterns("files", platformSpecificBuildOptions);
                if (patterns == null || patterns.length === 0) {
                    patterns = ["**/*"];
                }
                patterns.push("!**/node_modules/*/{README.md,README,readme.md,readme,test}");
                let rawFilter = null;
                const deprecatedIgnore = this.devMetadata.build.ignore;
                if (deprecatedIgnore) {
                    if (typeof deprecatedIgnore === "function") {
                        log_1.log(`"ignore is specified as function, may be new "files" option will be suit your needs? Please see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`);
                    } else {
                        log_1.warn(`"ignore is deprecated, please use "files", see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`);
                    }
                    rawFilter = deprecatedUserIgnoreFilter(options, this.info.appDir);
                }
                const filePatterns = this.getParsedPatterns(patterns, arch);
                let excludePatterns = null;
                if (!this.info.isTwoPackageJsonProjectLayoutUsed) {
                    if (extraResourcePatterns != null) {
                        excludePatterns = extraResourcePatterns;
                    }
                    if (extraFilePatterns != null) {
                        if (excludePatterns == null) {
                            excludePatterns = extraFilePatterns;
                        } else {
                            excludePatterns = excludePatterns.concat(extraFilePatterns);
                        }
                    }
                }
                const resourcesPath = this.platform === metadata_1.Platform.MAC ? path.join(appOutDir, "Electron.app", "Contents", "Resources") : path.join(appOutDir, "resources");
                const filter = filter_1.createFilter(this.info.appDir, filePatterns, ignoreFiles, rawFilter, excludePatterns);
                const promise = asarOptions == null ? filter_1.copyFiltered(this.info.appDir, path.join(resourcesPath, "app"), filter, this.platform === metadata_1.Platform.WINDOWS) : asarUtil_1.createAsarArchive(this.info.appDir, resourcesPath, asarOptions, filter);
                const promises = [promise, util_1.unlinkIfExists(path.join(resourcesPath, "default_app.asar")), util_1.unlinkIfExists(path.join(appOutDir, "version"))];
                if (this.info.electronVersion[0] === "0") {
                    // electron release >= 0.37.4 - the default_app/ folder is a default_app.asar file
                    promises.push(fs_extra_p_1.remove(path.join(resourcesPath, "default_app")));
                }
                yield bluebird_1.Promise.all(promises);
            }));
            yield log_1.task(`Packaging for platform ${ platformName } ${ metadata_1.Arch[arch] } using electron ${ this.info.electronVersion } to ${ path.relative(this.projectDir, appOutDir) }`, p);
            yield this.doCopyExtraFiles(true, appOutDir, arch, platformSpecificBuildOptions);
            yield this.doCopyExtraFiles(false, appOutDir, arch, platformSpecificBuildOptions);
            const afterPack = this.devMetadata.build.afterPack;
            if (afterPack != null) {
                yield afterPack({
                    appOutDir: appOutDir,
                    options: options
                });
            }
            yield this.sanityCheckPackage(appOutDir, asarOptions != null);
        });
    }
    computePackOptions() {
        return __awaiter(this, void 0, void 0, function* () {
            //noinspection JSUnusedGlobalSymbols
            const appInfo = this.appInfo;
            const options = deepAssign_1.deepAssign({
                icon: yield this.getIconPath(),
                appInfo: appInfo
            }, this.devMetadata.build);
            if (this.platform === metadata_1.Platform.WINDOWS) {
                options["version-string"] = appInfo.versionString;
            }
            delete options.osx;
            delete options.win;
            delete options.linux;
            // this option only for windows-installer
            delete options.iconUrl;
            return options;
        });
    }
    getIconPath() {
        return __awaiter(this, void 0, void 0, function* () {
            return null;
        });
    }
    computeAsarOptions(customBuildOptions) {
        let result = this.devMetadata.build.asar;
        let platformSpecific = customBuildOptions.asar;
        if (platformSpecific != null) {
            result = platformSpecific;
        }
        if (result === false) {
            return null;
        }
        const buildMetadata = this.devMetadata.build;
        if (buildMetadata["asar-unpack"] != null) {
            log_1.warn("asar-unpack is deprecated, please set as asar.unpack");
        }
        if (buildMetadata["asar-unpack-dir"] != null) {
            log_1.warn("asar-unpack-dir is deprecated, please set as asar.unpackDir");
        }
        if (result == null || result === true) {
            result = {
                unpack: buildMetadata["asar-unpack"],
                unpackDir: buildMetadata["asar-unpack-dir"]
            };
        }
        return Object.assign(result, {
            extraMetadata: this.options.extraMetadata
        });
    }
    expandPattern(pattern, arch) {
        return pattern.replace(/\$\{arch}/g, metadata_1.Arch[arch]).replace(/\$\{os}/g, this.platform.buildConfigurationKey).replace(/\$\{\/\*}/g, "{,/**/*,/**/.*}");
    }
    doCopyExtraFiles(isResources, appOutDir, arch, customBuildOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const base = isResources ? this.getResourcesDir(appOutDir) : this.platform === metadata_1.Platform.MAC ? path.join(appOutDir, `${ this.appInfo.productFilename }.app`, "Contents") : appOutDir;
            const patterns = this.getExtraFilePatterns(isResources, arch, customBuildOptions);
            return patterns == null || patterns.length === 0 ? null : filter_1.copyFiltered(this.projectDir, base, filter_1.createFilter(this.projectDir, patterns), this.platform === metadata_1.Platform.WINDOWS);
        });
    }
    getParsedPatterns(patterns, arch) {
        const minimatchOptions = {};
        const parsedPatterns = [];
        for (let i = 0; i < patterns.length; i++) {
            const pattern = this.expandPattern(patterns[i], arch);
            const parsedPattern = new minimatch_1.Minimatch(pattern, minimatchOptions);
            parsedPatterns.push(parsedPattern);
            if (!filter_1.hasMagic(parsedPattern)) {
                // https://github.com/electron-userland/electron-builder/issues/545
                // add **/*
                parsedPatterns.push(new minimatch_1.Minimatch(`${ pattern }/*/**`, minimatchOptions));
            }
        }
        return parsedPatterns;
    }
    getFilePatterns(name, customBuildOptions) {
        let patterns = this.devMetadata.build[name];
        if (patterns != null && !Array.isArray(patterns)) {
            patterns = [patterns];
        }
        let platformSpecificPatterns = customBuildOptions[name];
        if (platformSpecificPatterns != null) {
            if (!Array.isArray(platformSpecificPatterns)) {
                platformSpecificPatterns = [platformSpecificPatterns];
            }
            return patterns == null ? platformSpecificPatterns : Array.from(new Set(patterns.concat(platformSpecificPatterns)));
        }
        return patterns;
    }
    getResourcesDir(appOutDir) {
        return this.platform === metadata_1.Platform.MAC ? this.getOSXResourcesDir(appOutDir) : path.join(appOutDir, "resources");
    }
    getOSXResourcesDir(appOutDir) {
        return path.join(appOutDir, `${ this.appInfo.productFilename }.app`, "Contents", "Resources");
    }
    checkFileInPackage(resourcesDir, file, isAsar) {
        return __awaiter(this, void 0, void 0, function* () {
            const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file));
            if (isAsar) {
                yield asarUtil_1.checkFileInPackage(path.join(resourcesDir, "app.asar"), relativeFile);
            } else {
                const outStat = yield util_1.statOrNull(path.join(resourcesDir, "app", relativeFile));
                if (outStat == null) {
                    throw new Error(`Application entry file "${ relativeFile }" does not exist. Seems like a wrong configuration.`);
                } else if (!outStat.isFile()) {
                    throw new Error(`Application entry file "${ relativeFile }" is not a file. Seems like a wrong configuration.`);
                }
            }
        });
    }
    sanityCheckPackage(appOutDir, isAsar) {
        return __awaiter(this, void 0, void 0, function* () {
            const outStat = yield util_1.statOrNull(appOutDir);
            if (outStat == null) {
                throw new Error(`Output directory "${ appOutDir }" does not exist. Seems like a wrong configuration.`);
            } else if (!outStat.isDirectory()) {
                throw new Error(`Output directory "${ appOutDir }" is not a directory. Seems like a wrong configuration.`);
            }
            const mainFile = this.appInfo.metadata.main || "index.js";
            yield this.checkFileInPackage(this.getResourcesDir(appOutDir), mainFile, isAsar);
        });
    }
    archiveApp(format, appOutDir, outFile) {
        return __awaiter(this, void 0, void 0, function* () {
            return archive_1.archiveApp(this.devMetadata.build.compression, format, outFile, this.platform === metadata_1.Platform.MAC ? path.join(appOutDir, `${ this.appInfo.productFilename }.app`) : appOutDir);
        });
    }
    generateName(ext, arch, deployment) {
        let classifier = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

        let c = arch === metadata_1.Arch.x64 ? ext === "AppImage" ? "x86_64" : null : metadata_1.Arch[arch];
        if (c == null) {
            c = classifier;
        } else if (classifier != null) {
            c += `-${ classifier }`;
        }
        return this.generateName2(ext, c, deployment);
    }
    generateName2(ext, classifier, deployment) {
        const dotExt = ext == null ? "" : `.${ ext }`;
        return `${ deployment ? this.appInfo.name : this.appInfo.productFilename }-${ this.appInfo.version }${ classifier == null ? "" : `-${ classifier }` }${ dotExt }`;
    }
    getDefaultIcon(ext) {
        return __awaiter(this, void 0, void 0, function* () {
            const resourceList = yield this.resourceList;
            const name = `icon.${ ext }`;
            if (resourceList.indexOf(name) !== -1) {
                return path.join(this.buildResourcesDir, name);
            } else {
                log_1.warn("Application icon is not set, default Electron icon will be used");
                return null;
            }
        });
    }
}
exports.PlatformPackager = PlatformPackager;
function getArchSuffix(arch) {
    return arch === metadata_1.Arch.x64 ? "" : `-${ metadata_1.Arch[arch] }`;
}
exports.getArchSuffix = getArchSuffix;
// fpm bug - rpm build --description is not escaped, well... decided to replace quite to smart quote
// http://leancrew.com/all-this/2010/11/smart-quotes-in-javascript/
function smarten(s) {
    // opening singles
    s = s.replace(/(^|[-\u2014\s(\["])'/g, "$1\u2018");
    // closing singles & apostrophes
    s = s.replace(/'/g, "\u2019");
    // opening doubles
    s = s.replace(/(^|[-\u2014/\[(\u2018\s])"/g, "$1\u201c");
    // closing doubles
    s = s.replace(/"/g, "\u201d");
    return s;
}
exports.smarten = smarten;
function deprecatedUserIgnoreFilter(opts, appDir) {
    let ignore = opts.ignore || [];
    let ignoreFunc;
    if (typeof ignore === "function") {
        ignoreFunc = function (file) {
            return !ignore(file);
        };
    } else {
        if (!Array.isArray(ignore)) {
            ignore = [ignore];
        }
        ignoreFunc = function (file) {
            for (let i = 0; i < ignore.length; i++) {
                if (file.match(ignore[i])) {
                    return false;
                }
            }
            return true;
        };
    }
    return function filter(file) {
        let name = file.split(path.resolve(appDir))[1];
        if (path.sep === "\\") {
            // convert slashes so unix-format ignores work
            name = name.replace(/\\/g, "/");
        }
        return ignoreFunc(name);
    };
}
exports.deprecatedUserIgnoreFilter = deprecatedUserIgnoreFilter;
//# sourceMappingURL=platformPackager.js.map